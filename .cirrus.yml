freebsd_instance:
  image: freebsd-12-2-release-amd64

# Test FreeBSD in a full VM on cirrus-ci.com
# The binary will be also built in 32-bit mode, but will execute on a
# 64-bit kernel and in a 64-bit environment. Our tests don't execute
# any of the system's binaries, so the environment shouldn't matter.
task:
  name: freebsd-test
  only_if: $CIRRUS_TAG == ''
  env:
    RUSTFLAGS: -Dwarnings
  setup_script:
    - pkg install -y bash curl
    - curl https://sh.rustup.rs -sSf --output rustup.sh
    - sh rustup.sh -y --profile minimal --default-toolchain stable
    - . $HOME/.cargo/env
    - rustup target add i686-unknown-freebsd
    - |
      echo "~~~~ rustc --version ~~~~"
      rustc --version
  test_script:
    - . $HOME/.cargo/env
    - cargo test --all
  i686_test_script:
    - . $HOME/.cargo/env
    - |
      cargo test --all --target i686-unknown-freebsd
  build_test_script:
    - . $HOME/.cargo/env
    - |
      cargo build --verbose

task:
  name: freebsd-release
  only_if: $CIRRUS_TAG != ''
  env:
    RUSTFLAGS: -Dwarnings
    GITHUB_TOKEN: ENCRYPTED[3c61f00fd4eb13f2d727370312f33201453e9a43fc57766b3ba5d0876a5abc838cf2c111cdaedd3dbf9b8f6e3f154d5b]
  setup_script:
    - pkg install -y bash curl jq
    - curl https://sh.rustup.rs -sSf --output rustup.sh
    - sh rustup.sh -y --profile minimal --default-toolchain stable
    - . $HOME/.cargo/env
    - rustup target add i686-unknown-freebsd
    - |
      echo "~~~~ rustc --version ~~~~"
      rustc --version
  build_script: |
    . $HOME/.cargo/env
    cargo build --verbose --release --target=x86_64-unknown-freebsd
    cargo build --verbose --release --target=i686-unknown-freebsd
  archive_x86_64_script: |
    . $HOME/.cargo/env
    staging="paket-$CIRRUS_TAG-x86_64-unknown-freebsd"
    mkdir -p "$staging/"
    cp "target/x86_64-unknown-freebsd/release/paket" "$staging/"
    strip "$staging/paket"
    cp {README.md,LICENSE-APACHE,LICENSE-MIT} "$staging/"
    tar czf "$staging.tar.gz" "$staging"
  archive_i686_script: |
    . $HOME/.cargo/env
    staging="paket-$CIRRUS_TAG-i686-unknown-freebsd"
    mkdir -p "$staging/"
    cp "target/i686-unknown-freebsd/release/paket" "$staging/"
    strip "$staging/paket"
    cp {README.md,LICENSE-APACHE,LICENSE-MIT} "$staging/"
    tar czf "$staging.tar.gz" "$staging"
  upload_script: |
    #!/usr/bin/env bash

    set -e

    . $HOME/.cargo/env

    if [[ "$GITHUB_TOKEN" == "" ]]; then
      echo "GitHub access token GITHUB_TOKEN env is not provided!"
      exit 1
    fi

    RETRIES=0
    until [ $RETRIES -eq 20 ]
    do
      echo "Finding the GitHub release associated with '$CIRRUS_TAG' tag..."
      CIRRUS_RELEASE=$(curl -sL -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/$CIRRUS_REPO_FULL_NAME/releases | jq -c "[ .[] | select( .tag_name | contains(\"$CIRRUS_TAG\")) ] | .[0]" | jq -r '.id')
      [[ "$CIRRUS_RELEASE" != "null" ]] && break
      RETRIES=$((RETRIES+1))
      sleep 30
    done

    if [[ "$CIRRUS_RELEASE" == "null" ]]; then
        echo "Can not find the associated GitHub '$CIRRUS_TAG' release!"
        exit 1
    fi

    echo "GitHub release '$CIRRUS_TAG' found. Preparing asset files to upload..."

    file_content_type="application/octet-stream"
    files_to_upload=(
      paket-$CIRRUS_TAG-i686-unknown-freebsd.tar.gz
      paket-$CIRRUS_TAG-x86_64-unknown-freebsd.tar.gz
    )

    for fpath in "${files_to_upload[@]}"
    do
      echo "Uploading GitHub release asset '$fpath'..."
      name=$(basename "$fpath")
      url_to_upload="https://uploads.github.com/repos/$CIRRUS_REPO_FULL_NAME/releases/$CIRRUS_RELEASE/assets?name=$name"
      curl -LX POST \
        --data-binary @$fpath \
        --header "Authorization: token $GITHUB_TOKEN" \
        --header "Content-Type: $file_content_type" \
        $url_to_upload
    done

    echo
    echo "GitHub release '$CIRRUS_TAG' assets uploaded successfully."
